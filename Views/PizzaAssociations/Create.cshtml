@model PizzaStore.Models.PizzaAssociation

@{
    ViewData["Title"] = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1>Create</h1>

<h4>PizzaAssociation</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Create" id="toppingsForm">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="PizzaId" class="control-label"></label>
                <label>Add toppings to pizza</label>
            </div>

            <div class="form-group">
                @{
                    foreach (Topping toppingOption in ViewBag.AvailableToppings)
                    {
                        <div>
                    @Html.HiddenFor(pizzaAssociation => pizzaAssociation.PizzaId) <!-- Hidden field to bind PizzaId -->
                            <!-- Checks the SelectedTopping list and sets the checkbox to checked or unchecked dependent on that -->
                            
                            <input type="checkbox" name="selectedToppingIDs" 
                            
                            @if (ViewBag.SelectedToppings.Contains(toppingOption))
                            {
                                <text>checked="checked"</text>
                            }
                            
                            onchange="document.getElementById('toppingsForm').submit();" 
                            
                            value="@toppingOption.Id" />

                            <!-- 
                            Results in an array of integers, each of which is a toppingID 
                            ASP.NET doesn't seem to include an easy way to make a checkbox submit a form, 
                            so we need some JavaScript to do it. 
                            
                            Using that to submit this form every time 
                            a checkbox is checked or unchecked, since that makes it re-render the partial.

                            Since we are using JavaScript, there is probably a more elegant solution than to use
                            my partial at all. But since I have it I'm going to use it
                            -->

                <label>@toppingOption.Name</label>
                </div>
            }
            }
            </div>
            <div class="form-group">
                <a class="btn btn-primary" asp-controller="OrderAPizza" asp-action="AddToCart" asp-route-pizzaId="@ViewBag.currentPizza.Id">Done</a>
                <!--
                <input type="submit" value="Create" class="btn btn-primary" />
                -->
            </div>
        </form>
    </div>
    <div>
        <dl class="row">
            <dd>
                @{
                    ApplicationDbContext _context = ViewBag.Context;
                    Pizza pizza = ViewBag.CurrentPizza;

                    <partial name="_InProgressPizzaImage" model="pizza" />
                }
            </dd>
        </dl>
    </div>
</div>



<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
